@using BlazorApp.Form
@using System.Linq.Expressions
@using System.Reflection
@using System.Text.Json
@using System.Collections
@typeparam T

<h3>DataForm</h3>

@foreach (var field in Form.Fields)
{
    <b>@field.Label</b>
                   
    @if (field.Repeatable)
    {
        for (var i = 0; i < GetListLength(field); i++)
        {
            var index = i;
            <b>@index</b>
            <input value="@GetListValue(field, index)" @oninput="@((e) => SetListValue(field, e.Value?.ToString(), index))" />
            <button @onclick="@(() => RemoveListValue(field, index))">X</button>

            <br />
        }
        
        <button @onclick="@(() => SetListValue(field, null, GetListLength(field)))">ADD</button>
    }
    else
    {
        <input value="@GetValue(field)" @oninput="@((e) => SetValue(field, e.Value?.ToString()))" />
    }

    <br />  
    <i>@GetValue(field)</i>
    <br />  
    <textarea>@(JsonSerializer.Serialize(Form.Data))</textarea>                
}

@code {
    [Parameter]
    public DataForm<T> Form { get; set; }

    protected object? GetValue(DataFormField<T> field)
    {
        return GetDeepValue(Form.Data, field.Path);
    }
    
    protected void SetValue(DataFormField<T> field, object? value)
    {
        SetDeepValue(Form.Data, field.Path, value);
    }

    protected void RemoveListValue(DataFormField<T> field, int index)
    {
        var prop = GetValue(field);

        if (prop is IList list)
        {
            list.RemoveAt(index);
        }
    }

    protected void SetListValue(DataFormField<T> field, object? value, int index)
    {
        var prop = GetValue(field);

        if (prop is IList list)
        {
            if (list.Count - 1 < index)
            {
                list.Add(value);
            }
            else
            {
                list[index] = value;
            }
        }
    }
    
    protected object? GetListValue(DataFormField<T> field,  int index)
    {
        var prop = GetValue(field);

        if (prop is IList list)
        {
            return list[index];
        }

        return null;
    }

    protected int GetListLength(DataFormField<T> field)
    {
        var prop = GetValue(field);

        if (prop is IList list)
        {
            return list.Count;
        }
        
        return 0;
    }
    
    protected PropertyInfo? GetPropertyInfo(T target, Expression<Func<T, object>> path)
    {
         List<MemberInfo> members = new List<MemberInfo>();

        Expression exp = path.Body;

        // There is a chain of getters in propertyToSet, with at the 
        // beginning a ParameterExpression. We put the MemberInfo of
        // these getters in members. We don't really need the 
        // ParameterExpression

        while (exp != null)
        {
            MemberExpression mi = exp as MemberExpression;

            if (mi != null)
            {
                members.Add(mi.Member);
                exp = mi.Expression;
            }
            else
            {
                ParameterExpression pe = exp as ParameterExpression;

                if (pe == null)
                {
                    // We support only a ParameterExpression at the base
                    throw new NotSupportedException();
                }

                break;
            }
        }

        if (members.Count == 0)
        {
            // We need at least a getter
            throw new NotSupportedException();
        }

        // Now we must walk the getters (excluding the last).
        object targetObject = target;

        // We have to walk the getters from last (most inner) to second
        // (the first one is the one we have to use as a setter)
        for (int i = members.Count - 1; i >= 1; i--)
        {
            PropertyInfo pi = members[i] as PropertyInfo;
            targetObject = pi.GetValue(targetObject);
        }

        return members[0] as PropertyInfo;
    }
    
    protected void SetDeepValue<TValue>(T target, Expression<Func<T, object>> propertyToSet, TValue valueToSet)
    {
        List<MemberInfo> members = new List<MemberInfo>();

        Expression exp = propertyToSet.Body;

        // There is a chain of getters in propertyToSet, with at the 
        // beginning a ParameterExpression. We put the MemberInfo of
        // these getters in members. We don't really need the 
        // ParameterExpression

        while (exp != null)
        {
            MemberExpression mi = exp as MemberExpression;

            if (mi != null)
            {
                members.Add(mi.Member);
                exp = mi.Expression;
            }
            else
            {
                ParameterExpression pe = exp as ParameterExpression;

                if (pe == null)
                {
                    // We support only a ParameterExpression at the base
                    throw new NotSupportedException();
                }

                break;
            }
        }

        if (members.Count == 0)
        {
            // We need at least a getter
            throw new NotSupportedException();
        }

        // Now we must walk the getters (excluding the last).
        object targetObject = target;

        // We have to walk the getters from last (most inner) to second
        // (the first one is the one we have to use as a setter)
        for (int i = members.Count - 1; i >= 1; i--)
        {
            PropertyInfo pi = members[i] as PropertyInfo;

            if (pi != null)
            {
                targetObject = pi.GetValue(targetObject);
            }
            else
            {
                FieldInfo fi = (FieldInfo)members[i];
                targetObject = fi.GetValue(targetObject);
            }
        }

         // The first one is the getter we treat as a setter
        {
            PropertyInfo pi = members[0] as PropertyInfo;

            if (pi != null)
            {
                pi.SetValue(targetObject, valueToSet);
            }
            else
            {
                FieldInfo fi = (FieldInfo)members[0];
                fi.SetValue(targetObject, valueToSet);
            }
        }
    }
    
    protected object? GetDeepValue(T target, Expression<Func<T, object>> propertyToSet)
    {
        List<MemberInfo> members = new List<MemberInfo>();

        Expression exp = propertyToSet.Body;

        // There is a chain of getters in propertyToSet, with at the 
        // beginning a ParameterExpression. We put the MemberInfo of
        // these getters in members. We don't really need the 
        // ParameterExpression

        while (exp != null)
        {
            MemberExpression mi = exp as MemberExpression;

            if (mi != null)
            {
                members.Add(mi.Member);
                exp = mi.Expression;
            }
            else
            {
                ParameterExpression pe = exp as ParameterExpression;

                if (pe == null)
                {
                    // We support only a ParameterExpression at the base
                    throw new NotSupportedException();
                }

                break;
            }
        }

        if (members.Count == 0)
        {
            // We need at least a getter
            throw new NotSupportedException();
        }

        // Now we must walk the getters (excluding the last).
        object targetObject = target;

        // We have to walk the getters from last (most inner) to second
        // (the first one is the one we have to use as a setter)
        for (int i = members.Count - 1; i >= 1; i--)
        {
            PropertyInfo pi = members[i] as PropertyInfo;

            if (pi != null)
            {
                targetObject = pi.GetValue(targetObject);
            }
            else
            {
                FieldInfo fi = (FieldInfo)members[i];
                targetObject = fi.GetValue(targetObject);
            }
        }

         // The first one is the getter we treat as a setter
        {
            PropertyInfo pi = members[0] as PropertyInfo;

            if (pi != null)
            {
                return pi.GetValue(targetObject);
            }
            else
            {
                FieldInfo fi = (FieldInfo)members[0];
                return fi.GetValue(targetObject);
            }
        }
        
    }
}